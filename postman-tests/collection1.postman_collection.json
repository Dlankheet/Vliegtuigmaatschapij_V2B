{
	"info": {
		"_postman_id": "fcf3b3e9-1574-44c7-b74b-d2118eb6a2a1",
		"name": "bep2-project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "done",
			"item": [
				{
					"name": "deleteAdminUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05a7a707-538c-449a-9493-8dd65ed57472",
								"exec": [
									"//Deze request mag falen, als de admin user niet bestaat. daarom geen tests."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/register/admin",
							"host": [
								"{{url}}"
							],
							"path": [
								"register",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a70b36fa-3672-4f95-bf0f-e7d0e05910f9",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"firstName\": \"Ad\",\n    \"lastName\": \"Min\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05523715-0d61-438c-a394-3ce85bee0491",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const authHeader = pm.response.headers.get(\"Authorization\");",
									"    const token = authHeader.substring(7);",
									"    pm.collectionVariables.set(\"authToken\", token);",
									"}",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/test\",",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"zou niet ingelogd moeten zijn als employee\",()=>pm.expect(response.code).to.be.equals(403))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "set Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62b159d9-a058-42f0-a110-2811cb83b3a0",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"employee\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/employee/setEmployee",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"setEmployee"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0bb5f8a-b673-4230-b2a9-9aadfa682e80",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const authHeader = pm.response.headers.get(\"Authorization\");",
									"    const token = authHeader.substring(7);",
									"    pm.collectionVariables.set(\"authToken\", token);",
									"}",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/test\",",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"zou ingelogd moeten zijn als employee\",()=>pm.expect(response.code).to.be.equals(200))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "907114b8-6ee0-4f0d-8081-803000be8cc2",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"flightId\", pm.response.json().id);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/flight/\"+pm.collectionVariables.get(\"flightId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"GetFlight zou 200 moeten geven.\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Flight is correct opgeslagen.\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.departureTime).to.be.equals(requestData.departureTime);",
									"        pm.expect(responseData.arrivalTime).to.be.equals(requestData.arrivalTime);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"departureTime\":\"2020-10-19T03:05:00\",\n    \"arrivalTime\":\"2020-10-19T06:30:00\",\n    \"route\":3,\n    \"plane\":\"PH-HSJ\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/flight",
							"host": [
								"{{url}}"
							],
							"path": [
								"flight"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0eac3f47-6229-4283-bab6-e7e3ec82d47e",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/flight/\"+pm.collectionVariables.get(\"flightId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"GetFlight zou 200 moeten geven.\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Flight is geupdated.\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.departureTime).to.be.equals(requestData.departureTime);",
									"        pm.expect(responseData.arrivalTime).to.be.equals(requestData.arrivalTime);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"arrivalTime\":\"2000-10-19T03:05:00\",\n    \"departureTime\":\"2000-10-19T06:30:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/flight/{{flightId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"flight",
								"{{flightId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f91d5d3f-0547-40d7-853c-515ed98dd1f5",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/flight/\"+pm.collectionVariables.get(\"flightId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Flight zou nu weg moeten zijn.\",()=>pm.expect(response.code).to.be.equals(404)) ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/flight/{{flightId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"flight",
								"{{flightId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Plane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bd1dc87-4692-4dda-8d4d-3ad6d99ebcc0",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"planeID\", pm.response.json().code);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/plane/\"+pm.collectionVariables.get(\"planeID\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getPlane zou 200 moeten geven\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Plane is correct opgeslagen\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.type).to.be.equals(requestData.type);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"Boeing747\",\n    \"type\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/plane/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"plane",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Plane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67911e19-6d9a-4b3f-b485-73f7467b080e",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/plane/\"+pm.collectionVariables.get(\"planeID\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getPlane zou 200 moeten geven.\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Plane is geupdated.\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.type).to.be.equals(requestData.type);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"Boeing747\",\n    \"type\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/plane/{{planeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"plane",
								"{{planeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Plane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cee20cdd-bed3-46e7-a6b6-1cfa0eb2227f",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/plane/\"+pm.collectionVariables.get(\"planeID\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Plane zou nu weg moeten zijn\",()=>pm.expect(response.code).to.be.equals(404)) ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/plane/{{planeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"plane",
								"{{planeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "197da63c-2c1c-4ae2-b7d6-5d3f47de83b6",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"airportCode\", pm.response.json().code);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/airport/\"+pm.collectionVariables.get(\"airportCode\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Airport is correct opgeslagen\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.name).to.be.equals(requestData.name);",
									"        pm.expect(responseData.lat).to.be.equals(requestData.lat);",
									"        pm.expect(responseData.lng).to.be.equals(requestData.lng);",
									"        pm.expect(responseData.place).to.be.equals(requestData.place);",
									"        pm.expect(responseData.country).to.be.equals(requestData.country);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"AMS\",\n    \"name\":\"Schiphol\",\n    \"lat\":30.49,\n    \"lng\":40.28,\n    \"country\":\"Netherlands\",\n    \"place\":\"Amsterdam\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/airport",
							"host": [
								"{{url}}"
							],
							"path": [
								"airport"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fef52694-a3f8-4905-b386-1d91f50e368f",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/airport/\"+pm.collectionVariables.get(\"airportCode\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getAirport zou 200 moeten geven\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"airport is geupdated\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.name).to.be.equals(requestData.name);",
									"        pm.expect(responseData.lat).to.be.equals(requestData.lat);",
									"        pm.expect(responseData.lng).to.be.equals(requestData.lng);",
									"        pm.expect(responseData.country).to.be.equals(requestData.country);",
									"        pm.expect(responseData.place).to.be.equals(requestData.place);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"AMS\",\n    \"name\":\"Schiphol\",\n    \"lat\":35.74857,\n    \"lng\":83.98690,\n    \"country\":\"Netherlands\",\n    \"place\":\"Amsterdam\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/airport/{{airportCode}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"airport",
								"{{airportCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa39895b-7021-465a-ba51-9554c5b364cc",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/airport/\"+pm.collectionVariables.get(\"airportCode\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Airport zou nu weg moeten zijn\",()=>pm.expect(response.code).to.be.equals(404)) ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/airport/{{airportCode}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"airport",
								"{{airportCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create TravelClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "509c29b8-4494-4962-ae79-1d17b641f14c",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"travelclassId\", pm.response.json().id);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/travelclass/\"+pm.collectionVariables.get(\"travelclassId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getTravelClass zou 200 moeten geven\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"TravelClass is correct opgeslagen\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.name).to.be.equals(requestData.name);",
									"        pm.expect(responseData.maxSeats).to.be.equals(requestData.maxSeats);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Economy\",\r\n    \"maxSeats\":30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/travelclass",
							"host": [
								"{{url}}"
							],
							"path": [
								"travelclass"
							]
						}
					},
					"response": []
				},
				{
					"name": "update TravelClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5005c02-1493-4981-94f7-a8108c94f8b7",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"url\")+\"/travelclass/\"+pm.collectionVariables.get(\"travelclassId\"),\r",
									"    method:\"GET\",\r",
									"    header: {\r",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")\r",
									"    }\r",
									"},(err,response)=>{\r",
									"    pm.test(\"getTravelClass zou 200 moeten geven\",()=>pm.expect(response.code).to.be.equals(200))\r",
									"    pm.test(\"TravelClass is geupdated\",()=>{\r",
									"        var responseData=response.json();\r",
									"        var requestData=JSON.parse(request.data);\r",
									"        pm.expect(responseData.name).to.be.equals(requestData.name);\r",
									"        pm.expect(responseData.maxSeats).to.be.equals(requestData.maxSeats);\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"First Class\",\r\n    \"maxSeats\":5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/travelclass/{{travelclassId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"travelclass",
								"{{travelclassId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete TravelClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d8fe852-0070-4f1b-bea0-d762686f5f31",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"url\")+\"/travelclass/\"+pm.collectionVariables.get(\"travelclassId\"),\r",
									"    method:\"GET\",\r",
									"    header: {\r",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")\r",
									"    }\r",
									"},(err,response)=>{\r",
									"    pm.test(\"TravelClass zou nu weg moeten zijn\",()=>pm.expect(response.code).to.be.equals(404)) \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/travelclass/{{travelclassId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"travelclass",
								"{{travelclassId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8cd4aaf9-f041-4c91-9c4d-16a8218b0e50",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6154271e-8733-48c8-ae9c-69d5be1bfffe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1cf5b22f-ec9f-4ac2-891d-bce0e6b19244",
			"key": "url",
			"value": "https://bep2.herokuapp.com"
		},
		{
			"id": "a84471cf-1129-4bc4-aef8-32280f857775",
			"key": "authToken",
			"value": ""
		},
		{
			"id": "6afa6be8-347c-4517-a65f-c816cb61d142",
			"key": "flightId",
			"value": ""
		},
		{
			"id": "553ae096-6e75-4b20-862f-624a934fdd9e",
			"key": "planeID",
			"value": ""
		},
		{
			"id": "d1492b34-63d6-4ecf-bb42-32a3357a58ca",
			"key": "airportCode",
			"value": ""
		},
		{
			"id": "804f3991-df3a-46c8-a2c9-6c1f9c187548",
			"key": "travelclassId",
			"value": ""
		},
		{
			"id": "53dc0be5-3848-4ac9-97d5-a5f1bb0fd316",
			"key": "bookingId",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}