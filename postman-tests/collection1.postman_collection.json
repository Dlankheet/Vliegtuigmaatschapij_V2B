{
	"info": {
		"_postman_id": "0edd0724-8176-4e98-be14-6348b3d5ad61",
		"name": "bep2-project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "done",
			"item": [
				{
					"name": "deleteAdminUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c950e23c-a119-4cc1-a0bc-c01efed90ed8",
								"exec": [
									"//Deze request mag falen, als de admin user niet bestaat. daarom geen tests."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/register/admin",
							"host": [
								"{{url}}"
							],
							"path": [
								"register",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d2a2254-1bfb-4921-8845-1b0c5e051ffe",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52c82805-3a51-4ee1-97dd-882b4f95de70",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const authHeader = pm.response.headers.get(\"Authorization\");",
									"    const token = authHeader.substring(7);",
									"    pm.collectionVariables.set(\"authToken\", token);",
									"}",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/test\",",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"zou niet ingelogd moeten zijn als employee\",()=>pm.expect(response.code).to.be.equals(403))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "set Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53b07cf0-b84d-44c1-9162-1011ba1e6bf4",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"employee\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/employee/setEmployee",
							"host": [
								"{{url}}"
							],
							"path": [
								"employee",
								"setEmployee"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dff6f2db-531b-4d15-b020-4709d3681992",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const authHeader = pm.response.headers.get(\"Authorization\");",
									"    const token = authHeader.substring(7);",
									"    pm.collectionVariables.set(\"authToken\", token);",
									"}",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/test\",",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"zou ingelogd moeten zijn als employee\",()=>pm.expect(response.code).to.be.equals(200))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2baf459-a9aa-41ec-adaa-cfe4a4b4cd72",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"flightId\", pm.response.json().id);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/flight/\"+pm.collectionVariables.get(\"flightId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"GetFlight zou 200 moeten geven.\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Flight is correct opgeslagen.\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.departureTime).to.be.equals(requestData.departureTime);",
									"        pm.expect(responseData.arrivalTime).to.be.equals(requestData.arrivalTime);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"departureTime\":\"2020-10-19T03:05:00\",\n    \"arrivalTime\":\"2020-10-19T06:30:00\",\n    \"route\":3,\n    \"plane\":\"PH-HSJ\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/flight",
							"host": [
								"{{url}}"
							],
							"path": [
								"flight"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d897f4aa-1d7b-4d7c-8af0-9fc43bac7ff4",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/flight/\"+pm.collectionVariables.get(\"flightId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"GetFlight zou 200 moeten geven.\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Flight is geupdated.\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.departureTime).to.be.equals(requestData.departureTime);",
									"        pm.expect(responseData.arrivalTime).to.be.equals(requestData.arrivalTime);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"arrivalTime\":\"2000-10-19T03:05:00\",\n    \"departureTime\":\"2000-10-19T06:30:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/flight/{{flightId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"flight",
								"{{flightId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9364ee85-44d9-4800-8b71-18cfe245e786",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/flight/\"+pm.collectionVariables.get(\"flightId\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Flight zou nu weg moeten zijn.\",()=>pm.expect(response.code).to.be.equals(404)) ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/flight/{{flightId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"flight",
								"{{flightId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Plane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c14df8c1-803e-4b2a-bbf4-943e5745ad9f",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"planeID\", pm.response.json().code);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/plane/\"+pm.collectionVariables.get(\"planeID\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getPlane zou 200 moeten geven\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Plane is correct opgeslagen\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.type.id).to.be.equals(requestData.type);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"boing\",\n    \"type\":2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/plane",
							"host": [
								"{{url}}"
							],
							"path": [
								"plane"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Plane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e82902b-0ece-43bb-b93e-c060568cf0ff",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/plane/\"+pm.collectionVariables.get(\"planeID\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getPlane zou 200 moeten geven.\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"Plane is geupdated.\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.type.id).to.be.equals(requestData.type);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/plane/{{planeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"plane",
								"{{planeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Plane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "303ac4c7-2e7c-4749-8b54-b865561741e3",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/plane/\"+pm.collectionVariables.get(\"planeID\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Plane zou nu weg moeten zijn\",()=>pm.expect(response.code).to.be.equals(404)) ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/plane/{{planeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"plane",
								"{{planeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b73905a0-5333-43be-b032-c0700a453574",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.collectionVariables.set(\"airportCode\", pm.response.json().code);",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/airport/\"+pm.collectionVariables.get(\"airportCode\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Airport is correct opgeslagen\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.name).to.be.equals(requestData.name);",
									"        pm.expect(responseData.lat).to.be.equals(requestData.lat);",
									"        pm.expect(responseData.lng).to.be.equals(requestData.lng);",
									"        pm.expect(responseData.place).to.be.equals(requestData.place);",
									"        pm.expect(responseData.country).to.be.equals(requestData.country);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"AAA\",\n    \"name\":\"Schiphol\",\n    \"lat\":30.49,\n    \"lng\":40.28,\n    \"country\":\"Netherlands\",\n    \"place\":\"Amsterdam\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/airport",
							"host": [
								"{{url}}"
							],
							"path": [
								"airport"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "634d19b6-fe61-4521-9203-fccb96d6760c",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/airport/\"+pm.collectionVariables.get(\"airportCode\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"getAirport zou 200 moeten geven\",()=>pm.expect(response.code).to.be.equals(200))",
									"    pm.test(\"airport is geupdated\",()=>{",
									"        var responseData=response.json();",
									"        var requestData=JSON.parse(request.data);",
									"        pm.expect(responseData.code).to.be.equals(requestData.code);",
									"        pm.expect(responseData.name).to.be.equals(requestData.name);",
									"        pm.expect(responseData.lat).to.be.equals(requestData.lat);",
									"        pm.expect(responseData.lng).to.be.equals(requestData.lng);",
									"        pm.expect(responseData.country).to.be.equals(requestData.country);",
									"        pm.expect(responseData.place).to.be.equals(requestData.place);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\":\"AAA\",\n    \"name\":\"Schiphol\",\n    \"lat\":35.74857,\n    \"lng\":83.98690,\n    \"country\":\"Netherlands\",\n    \"place\":\"Amsterdam\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/airport/{{airportCode}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"airport",
								"{{airportCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb1c3f5-7cbf-4135-aab6-4080fc49f684",
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get(\"url\")+\"/airport/\"+pm.collectionVariables.get(\"airportCode\"),",
									"    method:\"GET\",",
									"    header: {",
									"        \"authorization\": \"Bearer \"+pm.collectionVariables.get(\"authToken\")",
									"    }",
									"},(err,response)=>{",
									"    pm.test(\"Airport zou nu weg moeten zijn\",()=>pm.expect(response.code).to.be.equals(404)) ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/airport/{{airportCode}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"airport",
								"{{airportCode}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e130fc06-8b18-4028-93eb-f5746fa94de7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "83f0733f-b7d4-485d-a4a5-b35c9136fde7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "3cd460b1-cff2-488b-a7c8-7e2a3905a41a",
			"key": "url",
			"value": "https://bep2.herokuapp.com"
		},
		{
			"id": "a66098b2-f27c-47ca-b838-a61d1de13366",
			"key": "authToken",
			"value": ""
		},
		{
			"id": "3ca2e478-4e1e-43c7-b7cf-510e521ae84d",
			"key": "flightId",
			"value": ""
		},
		{
			"id": "cb765c10-edc2-4ed5-805a-25c5d5814b32",
			"key": "planeID",
			"value": ""
		},
		{
			"id": "f2096419-38ba-4a21-82db-131528f509bf",
			"key": "airportCode",
			"value": ""
		},
		{
			"id": "e2f71a97-c52a-40c4-92de-9e2871ce76ed",
			"key": "travelclassId",
			"value": ""
		},
		{
			"id": "fb8dfae9-e119-4532-a34d-c6f37ddd6b6f",
			"key": "bookingId",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}